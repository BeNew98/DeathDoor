Shader 사용법


ContentFBXRenderer 에 쉐이더 기능을 다 내장할 계획
----------------------------------------

FadeIN & Out 이나 Crack을 입히려면
ContentFBXRenderer로 렌더러를 만들어야함

SetCrack(); 을 호출하면, 머티리얼과 텍스쳐가 알아서 세팅됨. 
1번만 실행해야 하니 Start나 객체가 생성되는 시점에 한 번 호출하는 것 추천
(SetMaterial을 계속 호출하면 프레임드랍 미침)

SetFade(); 를 호출하면, 머티리얼이 알아서 세팅됨.
필터는 디폴트 인자를 설정해놔서 알아서 세팅되긴 하는데, 바꿀 생각 있으면 2번째 인자에 텍스쳐 이름 넣어주면 됨.
이 것도 여러번 실행하면 안되고 1번만 해야함

FadeIn(), FadeOut(); 첫 번째 인자는 소요시간 (몇초동안 Fade할 것인가), 두 번째 인자는 델타타임
계속 업데이트 해줘야 함


SetAllUnitTexture() 이거는 텍스쳐를 머티리얼 입힐 때마다 반복문 계속 만들어야 하는게 번거로우니
한 번에 바꿀 수 있게 해주는 함수.

첫 번째 인자는 쉐이더에 작성된 텍스쳐저장 변수명 (DiffuseTex 라든가 FilterTexture 라든가)
두 번째 인자는 텍스쳐 이름(PNG)


---------------------------------------------------------------------------------------------------------------
1. FadeShader

텍스쳐 하나를 필터를 사용하기 때문에, 반드시 텍스쳐 연결을 해 주어야 함.

렌더유닛 하나마다 머티리얼이 있기 때문에, 모든 렌더유닛에 해줘야 함.
얘는 현재 애니메이션 없는 애들만 되는데, 애니메이션 있는 애들한테 적용할 일 생기면 말해주세요.

예제)

std::shared_ptr<GameEngineFBXRender> TestRenderer = CreateComponent<GameEngineFBXRenderer>();

TestRenderer->SetFBXMesh(매쉬 이름, "ContentFade");  << 머티리얼을 ContentShader로 해야함.

auto Units = TestRenderer->AllRenderUnit();

for(int i = 0; i < Units.size(); i++)
{
	for(int j = 0; j < Units[i].size(); j++)
	{
		Units[i][j]->ShaderResHelper.SetTexture("FilterTexture", 텍스쳐 이름); << 원하는 필터의 텍스쳐로 설정하면 됨.
 	}
}

여기까지 설정 끝.

사용하는 법은 

for(int i = 0; i < Units.size(); i++)
{
	for(int j = 0; j < Units[i].size(); j++)
	{
		Units[i][j]->Fade.Fade += _DeltaTime; << 속도를 조절하고 싶으면 (1.0f / 원하는 시간) 을 델타타임에 곱해서 더하면 됨.
 	}
}

사라지는게 아니라, 점점 나타나게 하고 싶으면 반대로 하면 됨.
Units[i][j]->Fade.Fade 를 1.0로 초기화 한 뒤에, 델타타임을 빼는 방식으로 하면 됨.

---------------------------------------------------------------------------------------------------------------
2. Crack (유닛의 피가 감소하면 몸에 금이 가는 것)

기본적으로 ContentAniMeshDeffered에 넣어놓았고, 당연히 애니메이션이 있는 애들만 됩니다. 스태틱매시인데 이 효과 필요하면 말씀해주세요 만들어드림
그리고 얘는 디퍼드렌더링이라 반투명처리 안되는데, 이거떄문에 문제생기면 말해주세요 포워드렌더링으로 바꿔서 다시 만들어드림.

Crack텍스쳐를 플레이어에 입히는 방식이기 때문에, FadeShader와 똑같이 텍스쳐 연결을 해줘야함.

Example)

std::shared_ptr<GameEngineFBXRender> TestRenderer = CreateComponent<GameEngineFBXRenderer>();

TestRenderer->SetFBXMesh(매쉬 이름, "ContentAniMeshDeffered");  << 머티리얼을 ContentAniMeshDeffered로 해야함.

auto Units = TestRenderer->AllRenderUnit();

for(int i = 0; i < Units.size(); i++)
{
	for(int j = 0; j < Units[i].size(); j++)
	{
		Units[i][j]->ShaderResHelper.SetTexture("MaskTexture", "CrackMask.png"); << 얘는 무조건 CrackMask.png 입니다.
		//만약 똑같은 느낌으로 구현하고 싶은 다른게 있으면 CrackMask말고 다른거 써도 되긴 합니다. 어차피 그냥 위에 텍스쳐 입히는거라 

		Units[i][j]->Mask.UV_MaskingValue = 1.0f;  << 0.0f이면 크랙이 하나도 안보이고, 1.0f이면 크랙이 최대로 많이 보임. 
		//피 까일 때마다 한 번씩 수치 올리면서 업데이트 하시면 됨.
 	}
}

현재는 잘보이도록 색상이 마젠타 고정이고 나중에 분홍색으로 바꿀건데, 만약 색 바꾸는 기능 필요하면 말해주세요

